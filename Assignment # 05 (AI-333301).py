# -*- coding: utf-8 -*-
"""Assignment # 05.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EzrPJq52FgkVXxxkcsPcwyBXCmZrENwP

1. Write a Python function to find the maximum of three numbers.
"""

num1 = int(input("Enter the first number: "))
num2 = int(input("Enter the second number: "))
num3 = int(input("Enter the third number: "))

def find_maximum(a, b, c):
  if a>=b and a>=c:
    return a
  elif b>=a and b>=c:
    return b
  else:
    return c

result = find_maximum(num1,num2,num3)
print(f"The maximum number is {result}")

"""2. Write a Python function to sum all the numbers in a list.
Sample List : (8, 2, 3, 0, 7)
Expected Output : 20
"""

def sum_of_list(numbers):
    total = 0
    for number in numbers:
        total += number
    return total


sample_list = [8, 2, 3, 0, 7]

result = sum_of_list(sample_list)

print("The sum of the list is:", result)

"""3. Write a Python function to multiply all the numbers in a list.
Sample List : (8, 2, 3, -1, 7)
Expected Output : -336
"""

def multiply_list(numbers):
    total = 1
    for number in numbers:
        total *= number
    return total

sample_list = [8, 2, 3, -1, 7]
result = multiply_list(sample_list)
print("The product of the list is:", result)

"""4. Write a Python program to reverse a string.
Sample String : "1234abcd"
Expected Output : "dcba4321"
"""

def reverse_string(s):
    return s[::-1]

sample_string = "1234abcd"

reversed_string = reverse_string(sample_string)

print("The reversed string is:", reversed_string)

"""5. Write a Python function to calculate the factorial of a number (a non-negative
integer). The function accepts the number as an argument.

"""

def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n - 1)

number = int(input("Enter a non-negative integer: "))
result = factorial(number)
print(f"The factorial of {number} is: {result}")

"""6. Write a Python function to check whether a number falls within a given range."""

def is_in_range(number, start, end):
    return start <= number <= end

number = int(input("Enter a number: "))
start = int(input("Enter the start of the range: "))
end = int(input("Enter the end of the range: "))

if is_in_range(number, start, end):
    print(f"{number} is within the range {start} to {end}.")
else:
    print(f"{number} is not within the range {start} to {end}.")

"""7. Write a Python function that accepts a string and counts the number of upper
and lower case letters.
Sample String : 'The quick Brow Fox'
Expected Output :
No. of Upper case characters : 3
No. of Lower case Characters : 12
"""

def count_upper_lower(s):
    upper_count = 0
    lower_count = 0
    for char in s:
        if char.isupper():
            upper_count += 1
        elif char.islower():
            lower_count += 1
    return upper_count, lower_count

sample_string = 'The quick Brown Fox'

upper_count, lower_count = count_upper_lower(sample_string)

print(f"No. of Upper case characters: {upper_count}")
print(f"No. of Lower case characters: {lower_count}")

"""8. Write a Python function that takes a list and returns a new list with distinct
elements from the first list.
Sample List : [1,2,3,3,3,3,4,5]
Unique List : [1, 2, 3, 4, 5]
"""

def unique_elements(input_list):
    unique_list = []
    for element in input_list:
        if element not in unique_list:
            unique_list.append(element)
    return unique_list

sample_list = [1, 2, 3, 3, 3, 3, 4, 5]

unique_list = unique_elements(sample_list)

print("Unique List:", unique_list)

"""9. Write a Python function that takes a number as a parameter and checks
whether the number is prime or not.
Note : A prime number (or a prime) is a natural number greater than 1 and that
has no positive divisors other than 1 and itself.

"""

def is_prime(number):
    if number <= 1:
        return False
    for i in range(2, int(number ** 0.5) + 1):
        if number % i == 0:
            return False
    return True

number = int(input("Enter a number: "))
if is_prime(number):
    print(f"{number} is a prime number.")
else:
    print(f"{number} is not a prime number.")

"""10. Write a Python program to print the even numbers from a given list.
Sample List : [1, 2, 3, 4, 5, 6, 7, 8, 9]
Expected Result : [2, 4, 6, 8]
"""

def get_even_numbers(numbers):
    even_numbers = []
    for number in numbers:
        if number % 2 == 0:
            even_numbers.append(number)
    return even_numbers

sample_list = [1, 2, 3, 4, 5, 6, 7, 8, 9]

even_numbers = get_even_numbers(sample_list)

print("Even numbers:", even_numbers)

"""11. Write a Python function to check whether a number is "Perfect" or not.
According to Wikipedia : In number theory, a perfect number is a positive integer
that is equal to the sum of its proper positive divisors, that is, the sum of its
positive divisors excluding the number itself (also known as its aliquot sum).
Equivalently, a perfect number is a number that is half the sum of all of its
positive divisors (including itself).
Example : The first perfect number is 6, because 1, 2, and 3 are its proper positive
divisors, and 1 + 2 + 3 = 6. Equivalently, the number 6 is equal to half the sum of
all its positive divisors: ( 1 + 2 + 3 + 6 ) / 2 = 6. The next perfect number is 28 = 1 +
2 + 4 + 7 + 14. This is followed by the perfect numbers 496 and 8128.
"""

def is_perfect(number):
    if number <= 1:
        return False
    divisors_sum = 0
    for i in range(1, number):
        if number % i == 0:
            divisors_sum += i
    return divisors_sum == number

number = int(input("Enter a number: "))
if is_perfect(number):
    print(f"{number} is a perfect number.")
else:
    print(f"{number} is not a perfect number.")

"""12. Write a Python function that checks whether a passed string is a palindrome
or not.
Note: A palindrome is a word, phrase, or sequence that reads the same backward
as forward, e.g., madam or nurses run.
"""

def is_palindrome(s):
    s = s.replace(" ", "").lower()
    return s == s[::-1]

sample_string = input("Enter a string: ")
if is_palindrome(sample_string):
  print(f"'{sample_string}' is a palindrome.")
else:
  print(f"'{sample_string}' is not a palindrome.")

"""Task1:
You need to write a function in python that return all such numbers which are
divisible by 7 but are not a multiple of 5, between 2000 and 3200 (both included).
Return the obtained numbers in a comma-separated sequence on a single line.
"""

def find_numbers():
    result = []
    for number in range(2000, 3201):
        if number % 7 == 0 and number % 5 != 0:
            result.append(str(number))
    return ", ".join(result)

numbers = find_numbers()
print(numbers)

"""Task2:
You need code a function that calculates and returns the value according to the
given formula:
P = Square root of [(2 * A * B)/C]
Following are the fixed values of A and B:
A is 50. B is 30.
The values of the literal C should be taken as console input to your program in a
comma-separated sequence.
Example
Let us assume the following comma separated input sequence is given to the
program:
100,150,180
The output of the program should be:
18,22,24
"""

import math

def calculate_P(c_values):
    A = 50
    B = 30
    results = []
    for C in c_values:
        P = math.sqrt((2 * A * B) / C)
        results.append(int(P))
    return results

c_input = input("Enter the values of C as a comma-separated sequence: ")
c_values = [int(x) for x in c_input.split(",")]

p_values = calculate_P(c_values)

print("The output values are:", ", ".join(map(str, p_values)))

"""Task3:
You need to write a function that takes a comma separated sequence of words as
input and prints the words in a comma-separated sequence after sorting them
alphabetically.
Suppose the following input is supplied to the program:
without,hello,bag,world
Then, the output should be:
bag,hello,without,world
"""

def sort_words(input_string):
    words = input_string.split(",")
    words = [word.strip() for word in words]
    words.sort()
    return ", ".join(words)

input_string = "without,hello,bag,world"
sorted_words = sort_words(input_string)
print("Sorted words:", sorted_words)

"""Task4:
You need to write a program that takes sequence of lines as input and prints the
lines after making all characters in the sentence capitalized.
Suppose the following input is supplied to the program:
Hello world
Practice makes perfect
Then, the output should be:
HELLO WORLD
PRACTICE MAKES PERFECT

"""

while True:
    try:

        line = input()

        if not line:
            break

        print(line.upper())
        break

    except EOFError:
        break

"""Task5:
You need to write a function that counts the number of vowels in a given
sentence as input from console.
Suppose the following input is supplied to the program:
Hello world
Practice makes perfect
Then, the output should be:
a appeared 2 times
e appeared 5 times
i appeared 1 time
o appeared 2 times
u appeared 0 time
PRACTICE MAKES PERFECT
"""

def count_vowels(sentence):
    vowels = 'aeiou'
    count = {v: 0 for v in vowels}

    sentence = sentence.lower()

    for char in sentence:
        if char in count:
            count[char] += 1

    for vowel in vowels:
        time_word = "time" if count[vowel] == 1 else "times"
        print(f"{vowel} appeared {count[vowel]} {time_word}")

    print(sentence.upper())

input_sentence = input("Enter a sentence: ")
count_vowels(input_sentence)

"""Task6:
You need write a function that traces and makes a list of all such numbers
from1000 to 3000 in which all the digits are even numbers.

"""

def find_even_digit_numbers():
    even_digit_numbers = []

    for num in range(1000, 3001):
        str_num = str(num)

        if all(int(digit) % 2 == 0 for digit in str_num):
            even_digit_numbers.append(num)

    return even_digit_numbers

even_numbers = find_even_digit_numbers()
print(even_numbers)

"""Task7:
You need to write a code which accepts a sequence of comma separated 4 digit
binary numbers as its input and then check whether they are divisible by 5 or not.
The numbers that are divisible by 5 are to be printed in a comma separated
sequence.
Example:
0100,0011,1010,1001
Then the output should be:
1010
"""

def check_divisible_by_5(binary_sequence):
    binary_numbers = binary_sequence.split(',')

    divisible_by_5 = []

    for binary in binary_numbers:
        decimal = int(binary, 2)

        if decimal % 5 == 0:
            divisible_by_5.append(binary)

    return ','.join(divisible_by_5)

binary_input = input("Enter binary numbers (comma separated): ")

result = check_divisible_by_5(binary_input)
print(result)

"""Task8:
Write a program that accepts a sentence and calculate the number of letters and
digits.
Suppose the following input is supplied to the program:
hello world! 123
Then, the output should be:
LETTERS 10
DIGITS 3
"""

def count_letters_and_digits(sentence):
    letters_count = 0
    digits_count = 0

    for char in sentence:
        if char.isalpha():
            letters_count += 1
        elif char.isdigit():
            digits_count += 1

    print(f"LETTERS {letters_count}")
    print(f"DIGITS {digits_count}")

input_sentence = input("Enter a sentence: ")

count_letters_and_digits(input_sentence)